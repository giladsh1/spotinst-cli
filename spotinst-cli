#!/usr/bin/env python

# This tool allows the user to interact with spotinst API
# run the script with the -h flag for help

from json import loads as json_loads, dumps as json_dumps
from collections import OrderedDict
from optparse import OptionParser
from os import system, environ
from sys import argv, stdout
from os import path
from base64 import b64encode, b64decode
from commands import getoutput, getstatusoutput
from threading import Thread
from pkg_resources import DistributionNotFound

# This function opens a thread with args
def open_thread(thread_target,thread_args):
    t = Thread(target=thread_target, args = (thread_args))
    t.daemon = True
    t.start()
    processes.append(t)


# This function prints error and exits
def errorAndExit(exception_message):
    print "\nERROR - %s\n" %(exception_message)
    exit()


# This function changes the color of the prompt
def change_prompt_color(color):
    colors = {
        'red': "\033[1;31m",
        'green': "\033[0;32m",
        'normal': "\033[0;0m"
    }
    stdout.write(colors.get(color))


# This function prints a text in color and returns to normal
def print_in_color(color, msg):
    change_prompt_color(color)
    print msg
    change_prompt_color('normal')


# This function prints a group name surrounded with =
def print_header(text):
    text_len = len(text)
    print "\n" + ("-" * text_len)
    print text
    print ("-" * text_len)


# This function queries spotinst API endpoint and returns the result to a queue
def query_thread(queue, group, api_url, spotinst_token, req_method='GET', req_payload=None):
    try:
        headers = {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer %s' % spotinst_token,
        }
        result = ""
        if req_method == 'GET':
            result = get(api_url, headers=headers)
        elif req_method == 'PUT':
            result = put(api_url, headers=headers, data=req_payload)
        elif req_method == 'POST':
            result = post(api_url, headers=headers, data=req_payload)
        elif req_method == 'DELETE':
            result = delete(api_url, headers=headers, data=req_payload)
        else:
            errorAndExit("wrong http method: {req_method}".format(**locals()))
        queue.append([req_method, result, group])
    except Exception as e:
        errorAndExit(e.message)


# This function queries spotinst API endpoint
def query_api(api_url, spotinst_token, req_method='GET', req_payload=None):
    try:
        headers = {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer %s' % spotinst_token,
        }
        if req_method == 'GET':
            return get(api_url, headers=headers)
        elif req_method == 'PUT':
            return put(api_url, headers=headers, data=req_payload)
        elif req_method == 'POST':
            return post(api_url, headers=headers, data=req_payload)
        elif req_method == 'DELETE':
            return delete(api_url, headers=headers, data=req_payload)
        else:
            errorAndExit("wrong http method: {req_method}".format(**locals()))
    except Exception as e:
        errorAndExit(e.message)


# This function returns a groups dict, filtered by name (contains) or all if parameter is empty
def get_groups(grep_list, ungrep_list):
    if not options.json:
        print_message("Getting groups from Spotisnt, please wait...")
    result  = query_api(base_api_path, token)
    if result.status_code > 299:
        errorAndExit("bad response from Spotinst!\n{}".format(result.content))
    try:
        data = json_loads(result.content)
    except Exception as e:
        errorAndExit("while loading json response: {e.message}".format(**locals()))
    # apply grep and ungrep filters
    groups = {}
    all_groups = data['response']['items']
    if len(grep_list) == 0:
        for group in all_groups:
            groups[group['name']] = [group['id'], group['capacity']['minimum'], group['capacity']['target'], group['capacity']['maximum']]
    else:
        for group in all_groups:
            group_name = group['name'].lower()
            if [grep_term for grep_term in grep_list if grep_term in group_name] and not [ungrep_term for ungrep_term in ungrep_list if ungrep_term in group_name]:
                groups[group['name']] = [group['id'], group['capacity']['minimum'], group['capacity']['target'], group['capacity']['maximum']]
    # return a sorted list of groups
    return OrderedDict(sorted(groups.items()))


# This function prints groups as a table
def print_all_groups(groups_to_print):
    if not options.json:
        table = PrettyTable(['#' ,'Group name', 'ID', 'Min', 'Target', 'Max'])
        table.align = "l"
        table.border = True
        counter = 1
        for key, value in groups_to_print.iteritems():
            table.add_row([counter, key, value[0], value[1], value[2], value[3]])
            counter += 1
        print_message("Found the following groups: ")
        print "{table}\n".format(**locals())
    else:
        if options.list:
            groups_to_print = { "groups" : groups_to_print.keys()}
            print json_dumps(groups_to_print, indent=2)


# This function prints a message surrounded lines
def print_message(msg):
    all_lines = msg.splitlines()
    longest_line = 0
    for line in all_lines:
        if len(line.strip()) > longest_line:
            longest_line = len(line.strip())
    padding = 8
    print "\n" + ("=" * (longest_line + padding))
    for line in msg.splitlines():
        print (" " * (padding / 2)) + line
    print ("=" * (longest_line + padding)) + "\n"


# This function makes sure the user wants to process with his choice
def user_make_sure(question):
    ans_from_user = raw_input(question)
    if ans_from_user !="y":
        print "\nExiting...\n"
        exit()


# function to get y or n from the user and return True/ False accordingly
def get_yes_no_from_user(question):
    ans_from_user = ""
    while ans_from_user != "y" and ans_from_user != "n":
        ans_from_user = raw_input(question)
        if ans_from_user != "y" and ans_from_user != "n":
            print "please answer 'y' or 'n' only!"
    if ans_from_user == "y":
        return True
    else:
        return False


# function to split parsed option to list by comma
def parser_split(option, opt, value, parser):
    setattr(parser.values, option.dest, value.split(','))


# function to validate pip packages
def validate_pip_packages():
    pip_version = getstatusoutput('pip -V')
    if pip_version[0] != 0:
        errorAndExit("python-pip is not installed, please install it before using this tool!\n"
                     "On MacOS, you can install it using one of the following:\n"
                     "'brew install python' or 'sudo easy_install pip")

    if 'python 2.7' not in pip_version[1]:
        errorAndExit("This script currently supports python 2.7 only!")

    installed_packages = [pkg.split('==')[0] for pkg in getoutput('pip freeze').split('\n')]
    required_packages = ['prettytable', 'requests']
    try:
        for pkg in required_packages:
            if pkg not in installed_packages:
                raise  DistributionNotFound
    except DistributionNotFound:
        errorAndExit("One of the required pip packages is not installed!\n"
                     "Please install all packages using the following command in the project's root folder:\n"
                     "pip install -r requirements.txt --user --upgrade")


# function validate suspension input
def validate_suspension(option, opt, value, parser):
    if value not in valid_suspension_types:
        errorAndExit("invalid suspension value: '{value}'!\nValid values are: {list}\n".format(value=value, list=", ".join(valid_suspension_types)))
    # if value is set to ALL pass all process and remove ALL
    if value == 'ALL':
        processes_list = list(valid_suspension_types)
        processes_list.remove("ALL")
        setattr(parser.values, option.dest, processes_list)
    else:
        setattr(parser.values, option.dest, [value])

##### MAIN ####
validate_pip_packages()
from prettytable import PrettyTable
from requests import put, get, post, delete

# global variables
base_api_path = "https://api.spotinst.io/aws/ec2/group"
percent_alert_threshold = 30
processes = []
requests_queue = []
group_placeholder = "__group_id__"
valid_suspension_types = ["AUTO_SCALE", "AUTO_HEALING", "OUT_OF_STRATEGY","PREVENTIVE_REPLACEMENT","REVERT_PREFERRED", "ALL"]
payload = None
user_validation = False

# define help and options
usage = "Usage: %prog [options]"
parser = OptionParser(usage)
parser.add_option("-g", "--grep", type="string", action="callback", dest="grep", callback=parser_split, default="", help="text to filter groups by")
parser.add_option("-d", "--get-data", action="store_true", dest="data", default="", help="get groups data")
parser.add_option("-s", "--get-status", action="store_true", dest="status", default="", help="get groups status")
parser.add_option("--suspension-status", action="store_true", dest="suspension", default="", help="get groups suspension status")
parser.add_option("-u", "--ungrep", type="string", action="callback", default="", callback=parser_split, dest="ungrep", help="text to exclude groups")
parser.add_option("-l", "--list", action="store_true", dest="list", help="show group list and exit")
parser.add_option("--min", action="store", dest="min", type=int, help="update group minimum capacity, must suuply with max and target")
parser.add_option("--target", action="store", dest="target", type=int, help="update group target capacity, must supply with min and max")
parser.add_option("--max", action="store", dest="max", type=int, help="update group maximum capacity, must supply with min and target")
parser.add_option("--scale-up", action="store", dest="scale_up", type=int, help="scale up group by X number of instances")
parser.add_option("--scale-down", action="store", dest="scale_down", type=int, help="scale down group by X number of instances")
parser.add_option("--suspend", type="string", default=None, action="callback", callback=validate_suspension, dest="suspend", help="suspend scaling or healing for a group")
parser.add_option("--unsuspend", type="string", default=None, action="callback", callback=validate_suspension, dest="unsuspend", help="unsuspend scaling or healing for a group")
parser.add_option("--roll", action="store_true", dest="roll", help="roll a group, must supply batch-size, and grace-period")
parser.add_option("--batch-size", action="store", dest="batch", type=int, help="roll batch size - must supply with the roll flag")
parser.add_option("--grace-period", action="store", dest="grace", type=int, help="roll grace period - must supply with the roll flag")
parser.add_option("--replace-ami", action="store", dest="ami", help="replace AMI for group")
parser.add_option("--replace-health", action="store", dest="health", choices=['EC2', 'ELB', 'HCS'], help="replace health check type - valid options: EC2, ELB, HCS")
parser.add_option("--set-user-data", action="store", dest="user_data", help="updated user data - supply a file path which contains the user data script (cloud init)")
parser.add_option("--get-user-data", action="store_true", dest="get_user_data", help="fetch the user data script (cloud init)")
parser.add_option("--roll-status", action="store_true", dest="roll_status", help="check the status of deployments")
parser.add_option("-j", "--json", action="store_true", dest="json", help="output pure json -- useful for piping into json parsers like jq")
parser.add_option("-y", "--skip-validation", action="store_true", dest="skip_validation", help="skip prompt validation for non-interactive mode")
(options, args) = parser.parse_args()

# show help as default and exit
if len(argv) == 1:
    system("python " + argv[0] + " -h")
    exit()

# validate input
if any([options.min, options.max, options.target]) and not all([options.min, options.max, options.target]):
    errorAndExit("you must supply max, min and target together!")
if options.roll and not all([options.batch, options.grace]):
    errorAndExit("you must supply batch size and grace period with the roll flag!")
if options.json:
    if options.get_user_data:
        errorAndExit("user data cannot be printed as a json output!")
    if not options.skip_validation:
        errorAndExit("you must supply the -y option for json format")

token = environ.get('spotinst_token')
if not token:
    errorAndExit("you must define an environment variable called 'spotinst_token' with a valid token (use export or .bashrc file)!")

# get all groups that matches the search
groups_to_update = get_groups(options.grep, options.ungrep)
if len(groups_to_update) == 0:
    errorAndExit("could not find any groups for the search term: {}".format(options.grep))
print_all_groups(groups_to_update)

# if the list flag was triggered, need to exit
if options.list:
    exit()

# handle data request
if options.data:
    req_type = 'GET'
    req_uri = "{}/{}".format(base_api_path, group_placeholder)

# handle status request
elif options.status:
    req_type = 'GET'
    req_uri = "{}/{}/status".format(base_api_path, group_placeholder)

# handle suspension data request
elif options.suspension:
    req_type = 'GET'
    req_uri = "{}/{}/suspension".format(base_api_path, group_placeholder)

# handle suspension request
elif any([options.suspend, options.unsuspend]):
    req_uri = "{}/{}/suspension".format(base_api_path, group_placeholder)
    if options.suspend:
        req_type = 'POST'
        payload = json_dumps({"processes": options.suspend})
    elif options.unsuspend:
        req_type = 'DELETE'
        payload = json_dumps({"processes": options.unsuspend})

# handle scale request
elif any([options.scale_down, options.scale_up]):
    req_type = 'PUT'
    if options.scale_up:
        command = "up"
        adjustment = options.scale_up
    else:
        command = "down"
        adjustment = options.scale_down
    req_uri = "{}/{}/scale/{}\?adjustment={}".format(base_api_path, group_placeholder, command, adjustment)

# handle group update request
elif all([options.min, options.target, options.max]):
    payload = json_dumps({ "group": { "capacity": { "target": options.target, "minimum": options.min , "maximum": options.max }}})
    req_type = 'PUT'
    req_uri = "{}/{}".format(base_api_path, group_placeholder)

# handle roll request
elif all([options.roll, options.batch, options.grace]):
    req_type = 'PUT'
    req_uri = "{}/{}/roll".format(base_api_path, group_placeholder)
    payload = json_dumps({ "batchSizePercentage" : options.batch, "gracePeriod" : options.grace })

# handle replace ami
elif any([options.ami, options.health]):
    req_type = 'PUT'
    req_uri = "{}/{}".format(base_api_path, group_placeholder)
    if options.ami:
        payload = json_dumps({ "group": { "compute": { "launchSpecification": { "imageId": options.ami  }}}})
    else:
        payload = json_dumps({"group": {"compute": {"launchSpecification": {"healthCheckType": options.health}}}})

# handle replace of user data script
elif options.user_data:
    if not path.isfile(options.user_data):
        errorAndExit("{} is not a valid file name!".format(options.user_data))
    f = open(options.user_data, "r")
    user_data_script = f.read()
    f.close()
    user_data_script = b64encode(user_data_script)
    req_uri = "{}/{}".format(base_api_path, group_placeholder)
    req_type = 'PUT'
    payload = json_dumps({ "group": { "compute": { "launchSpecification": { "userData": user_data_script  }}}})

elif options.get_user_data:
    req_type = 'GET'
    req_uri = "{}/{}".format(base_api_path, group_placeholder)

elif options.roll_status:
    req_type = 'GET'
    req_uri = "{}/{}/roll".format(base_api_path, group_placeholder)

else:
    errorAndExit("Wrong options set - existing")

# make sure the user wants to continue with the current filter (unless the req type is GET)
if not user_validation and req_type != 'GET':
    if not options.skip_validation:
        user_make_sure("\nAre you sure you want to updated these groups [y/n]? ")
    else:
        if not options.json:
            print "Found skip validation option, skipping user prompt...\n"
    user_validation = True
    if not options.json:
        print_message("Updating groups - hold on...")


# loop through each group and update
for group, group_values in groups_to_update.iteritems():
    group_id = group_values[0]
    group_req_uri = req_uri.replace(group_placeholder, group_id)
    try:
        open_thread(query_thread, (requests_queue, group, group_req_uri, token, req_type, payload))
    except Exception as e:
        errorAndExit(e)

# wait for all threads to finish
for p in processes:
    p.join()

# print the results
for result in requests_queue:
    request_type = result[0]
    request_result = result[1]
    request_group = result[2]
    group_result = {"group": request_group, "content": json_loads(request_result.content), "request_status_code": request_result.status_code}
    if options.json:
        print json_dumps(group_result, indent=2, sort_keys=True)
    else:
        print_header(request_group)
        if request_result.status_code == 200:
            if request_type == 'GET':
                if not options.get_user_data:
                    print request_result.content
                else:
                    print b64decode(json_loads(request_result.content)['response']['items'][0]['compute']['launchSpecification']['userData'])
            else:
                print_in_color('green', "Update was successful!")
        else:
            try:
                data = json_loads(request_result.content)
            except:
                data = None
            print_in_color('red', "Error while updating group!\nstatus code: {}".format(request_result.status_code))
            if data is not None:
                print "request content: {}".format(data['response']['errors'][0]['message'])

if not options.json:
    print_message("Done executing on all groups!")
